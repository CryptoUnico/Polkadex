"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Blueprint = exports.BlueprintSubmittableResult = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));

var _api = require("@polkadot/api");

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _util2 = require("../util");

var _Base = require("./Base");

var _Contract = require("./Contract");

// Copyright 2017-2020 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
const EMPTY_SALT = new Uint8Array();

function createTx(fn) {
  return (options, ...params) => (0, _util2.isOptions)(options) ? fn(options, params) : fn(...(0, _util2.extractOptions)(options, params));
}

function createWithId(fn) {
  return (constructorOrId, options, ...params) => (0, _util2.isOptions)(options) ? fn(constructorOrId, options, params) : fn(constructorOrId, ...(0, _util2.extractOptions)(options, params));
}

function encodeSalt(salt = (0, _utilCrypto.randomAsU8a)()) {
  return salt instanceof _types.Bytes ? salt : salt && salt.length ? (0, _util.compactAddLength)((0, _util.u8aToU8a)(salt)) : EMPTY_SALT;
}

class BlueprintSubmittableResult extends _api.SubmittableResult {
  constructor(result, contract) {
    super(result);
    this.contract = void 0;
    this.contract = contract;
  }

}

exports.BlueprintSubmittableResult = BlueprintSubmittableResult;

var _tx = (0, _classPrivateFieldLooseKey2.default)("tx");

var _deploy = (0, _classPrivateFieldLooseKey2.default)("deploy");

class Blueprint extends _Base.Base {
  /**
   * @description The on-chain code hash for this blueprint
   */

  /**
   * @deprecated
   * @description Deprecated. Use `.tx.<constructorName>`. Creates a contract in a non-deterministic way.
   */
  constructor(api, abi, codeHash, decorateMethod) {
    super(api, abi, decorateMethod);
    this.codeHash = void 0;
    this.createContract = void 0;
    Object.defineProperty(this, _tx, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _deploy, {
      writable: true,
      value: (constructorOrId, {
        gasLimit = 0,
        salt,
        value = 0
      }, params) => {
        const encodedSalt = encodeSalt(salt);
        const withSalt = this.api.tx.contracts.instantiate.meta.args.length === 5;
        const encoded = this.abi.findConstructor(constructorOrId).toU8a(params, withSalt ? EMPTY_SALT : encodedSalt);
        const tx = withSalt ? this.api.tx.contracts.instantiate(value, gasLimit, this.codeHash, encoded, encodedSalt) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore old style with salt included
        : this.api.tx.contracts.instantiate(value, gasLimit, this.codeHash, encoded);
        return tx.withResultTransform(result => new BlueprintSubmittableResult(result, (0, _util2.applyOnEvent)(result, 'Instantiated', ([record]) => new _Contract.Contract(this.api, this.abi, record.event.data[1], this._decorateMethod))));
      }
    });
    this.codeHash = this.registry.createType('Hash', codeHash);
    this.createContract = createWithId((0, _classPrivateFieldLooseBase2.default)(this, _deploy)[_deploy]);
    this.abi.constructors.forEach(c => {
      const messageName = (0, _util.stringCamelCase)(c.identifier);

      if ((0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _tx)[_tx][messageName])) {
        (0, _classPrivateFieldLooseBase2.default)(this, _tx)[_tx][messageName] = createTx((o, p) => (0, _classPrivateFieldLooseBase2.default)(this, _deploy)[_deploy](c, o, p));
      }
    });
  }

  get tx() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _tx)[_tx];
  }

}

exports.Blueprint = Blueprint;