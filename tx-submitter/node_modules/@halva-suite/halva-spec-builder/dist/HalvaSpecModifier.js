"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HalvaSpecModifier = exports.HalvaMiddlewareRunner = void 0;
const _1 = require(".");
const util_crypto_1 = require("@polkadot/util-crypto");
const fs_1 = require("fs");
const FileHelper_1 = require("./helpers/FileHelper");
class HalvaMiddlewareRunner {
    constructor(path, balance, count, customArgs) {
        this.balance = balance;
        this.count = count;
        this.path = path;
        this.middlewares = [];
        if (customArgs)
            this.customArgs = customArgs;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    apply(...middleware) {
        this.middlewares.push(...middleware);
        return this;
    }
    run(json) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!json)
                json = fs_1.readFileSync(this.path, 'utf8');
            if (!this.mnemonic)
                this.mnemonic = util_crypto_1.mnemonicGenerate();
            this.ed25519Keys = yield _1.HalvaKeyring.GenerateKeys(this.count, this.mnemonic, 'ed25519');
            this.sr25519Keys = yield _1.HalvaKeyring.GenerateKeys(this.count, this.mnemonic, 'sr25519');
            this.jsonSchema = JSON.parse(json);
            if (!this.middlewares.length)
                throw new Error('Middlewares is null');
            for (const m of this.middlewares) {
                this.jsonSchema = m({
                    jsonSchema: this.jsonSchema,
                    sr25519Keys: this.sr25519Keys,
                    ed25519Keys: this.ed25519Keys,
                    path: this.path,
                    mnemonic: this.mnemonic,
                    balance: this.balance,
                    count: this.count,
                    customArgs: this.customArgs,
                });
            }
            return this;
        });
    }
    setMnemonic(mnemonic) {
        this.mnemonic = mnemonic;
        return this;
    }
    output(path) {
        FileHelper_1.writeToFile(path, JSON.stringify(this.jsonSchema, null, 2));
    }
}
exports.HalvaMiddlewareRunner = HalvaMiddlewareRunner;
class HalvaSpecModifier {
    static init(path, balance, count) {
        return new HalvaMiddlewareRunner(path, balance, count);
    }
}
exports.HalvaSpecModifier = HalvaSpecModifier;
//# sourceMappingURL=HalvaSpecModifier.js.map