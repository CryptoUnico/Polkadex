"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HalvaKeyring = void 0;
const keyring_1 = __importDefault(require("@polkadot/keyring"));
const util_crypto_1 = require("@polkadot/util-crypto");
class HalvaKeyring {
    static GenerateKeys(count, mnemo, type) {
        return __awaiter(this, void 0, void 0, function* () {
            yield util_crypto_1.cryptoWaitReady();
            if (!util_crypto_1.mnemonicValidate(mnemo))
                throw new Error('Mnemonic phrase not valid');
            const keyring = new keyring_1.default({ type });
            for (let i = 0; i < count; i++) {
                keyring.addPair(keyring.createFromUri(`${mnemo}//${i}`));
            }
            return keyring;
        });
    }
}
exports.HalvaKeyring = HalvaKeyring;
//# sourceMappingURL=HalvaKeyring.js.map