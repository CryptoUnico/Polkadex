"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.templateRunner = exports.CreateProject = exports.InitMain = void 0;
const fs_1 = require("fs");
const hygen_1 = require("hygen");
const path_1 = require("path");
const Git = require('nodegit');
const Logger = require('hygen/lib/logger');
const defaultTemplates = path_1.join(__dirname, '../_templates');
const SubstrateRepo = 'https://github.com/substrate-developer-hub/substrate-node-template.git';
exports.InitMain = async (force, boxName, projectName) => {
    if (boxName) {
        // TODO
    }
    if (!projectName) {
        exports.templateRunner(['test', 'new', '--name', 'example'], '');
        exports.templateRunner(['init', 'new'], '');
    }
    if (projectName) {
        if (force) {
            await exports.CreateProject(projectName);
            exports.templateRunner(['init', 'tests'], `/${projectName}`);
            exports.templateRunner(['init', 'new'], `/${projectName}`);
        }
        else if (!force) {
            if (fs_1.existsSync(path_1.join(process.cwd(), projectName))) {
                console.log(projectName + ' directory already exists! Using --force');
                process.exit(0);
            }
            await exports.CreateProject(projectName);
            exports.templateRunner(['init', 'tests'], `/${projectName}`);
            exports.templateRunner(['init', 'new'], `/${projectName}`);
        }
    }
};
exports.CreateProject = async (projectName) => {
    try {
        fs_1.mkdirSync(path_1.join(process.cwd(), projectName));
        console.log('Clone the substrate repository, it can take a long time :)');
        await Git.Clone(SubstrateRepo, path_1.join(process.cwd(), projectName));
    }
    catch (err) {
        console.log(err);
        process.exit(0);
    }
};
exports.templateRunner = (argv, path) => {
    hygen_1.runner(argv, {
        templates: defaultTemplates,
        cwd: process.cwd() + path,
        logger: new Logger(console.log.bind(console)),
        createPrompter: () => require('enquirer'),
        exec: (action, body) => {
            const opts = body && body.length > 0 ? { input: body } : {};
            return require('execa').shell(action, opts);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5pdE1haW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvSW5pdC9Jbml0TWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBMkM7QUFDM0MsaUNBQStCO0FBQy9CLCtCQUE0QjtBQUM1QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDM0MsTUFBTSxnQkFBZ0IsR0FBRyxXQUFJLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzFELE1BQU0sYUFBYSxHQUFHLHdFQUF3RSxDQUFDO0FBQ2xGLFFBQUEsUUFBUSxHQUFHLEtBQUssRUFDM0IsS0FBYyxFQUNkLE9BQWdCLEVBQ2hCLFdBQW9CLEVBQ3BCLEVBQUU7SUFDRixJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU87S0FDUjtJQUVELElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsc0JBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELHNCQUFjLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDckM7SUFFRCxJQUFJLFdBQVcsRUFBRTtRQUNmLElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxxQkFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2pDLHNCQUFjLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELHNCQUFjLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO2FBQU0sSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLGVBQVUsQ0FBQyxXQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLDBDQUEwQyxDQUFDLENBQUM7Z0JBQ3RFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakI7WUFDRCxNQUFNLHFCQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDakMsc0JBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDckQsc0JBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDcEQ7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVXLFFBQUEsYUFBYSxHQUFHLEtBQUssRUFBRSxXQUFtQixFQUFFLEVBQUU7SUFDekQsSUFBSTtRQUNGLGNBQVMsQ0FBQyxXQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsV0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0tBQ2xFO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUM7QUFFVyxRQUFBLGNBQWMsR0FBRyxDQUFDLElBQWMsRUFBRSxJQUFhLEVBQUUsRUFBRTtJQUM5RCxjQUFNLENBQUMsSUFBSSxFQUFFO1FBQ1gsU0FBUyxFQUFFLGdCQUFnQjtRQUMzQixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUk7UUFDekIsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3pDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDNUQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIn0=