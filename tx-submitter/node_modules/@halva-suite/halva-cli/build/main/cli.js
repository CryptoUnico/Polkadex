#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const init_1 = require("./Commands/init");
const Configure_1 = require("./Configure");
const configChange_1 = require("./TestRunner/Config/configChange");
const CreateArtifact_1 = require("./CreateArtifact/CreateArtifact");
const Commands_1 = require("./Commands/");
// tslint:disable-next-line: no-unused-expression
yargs_1.default
    .usage('Usage: $0 <cmd> [args]')
    .command(new Commands_1.Test())
    .command(new Commands_1.Console())
    .command(new Commands_1.Migrate())
    .command(new Commands_1.Networks())
    .command(new Commands_1.Exec())
    .command(new init_1.Init())
    .command('create <artifact_type> <ArtifactName>', 'Create artifact', yargs => {
    yargs
        .positional('artifact_type', {
        describe: 'Artifact type',
        default: 'test'
    })
        .positional('ArtifactName', {
        describe: 'Artifact name',
        default: 'defaultTemplate'
    });
}, argv => {
    CreateArtifact_1.CreateArtifact([
        argv.artifact_type,
        'new',
        '--name',
        argv.ArtifactName
    ]);
})
    .command('config <get|set> <key> <value>', 'Config changer', yargs => {
    yargs
        .positional('accessor', {
        describe: 'get or set'
    })
        .positional('key', {
        describe: 'key'
    })
        .positional('value', {
        describe: 'value'
    });
}, argv => {
    configChange_1.configChange(argv.get, argv.key, argv.value, Configure_1.getConfigureModule(null));
})
    .command(new Commands_1.Start())
    .help().argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsMENBQXVDO0FBQ3ZDLDJDQUFpRDtBQUNqRCxtRUFBZ0U7QUFDaEUsb0VBQWlFO0FBQ2pFLDBDQUE0RTtBQUU1RSxpREFBaUQ7QUFDakQsZUFBSztLQUNGLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztLQUMvQixPQUFPLENBQUMsSUFBSSxlQUFJLEVBQUUsQ0FBQztLQUNuQixPQUFPLENBQUMsSUFBSSxrQkFBTyxFQUFFLENBQUM7S0FDdEIsT0FBTyxDQUFDLElBQUksa0JBQU8sRUFBRSxDQUFDO0tBQ3RCLE9BQU8sQ0FBQyxJQUFJLG1CQUFRLEVBQUUsQ0FBQztLQUN2QixPQUFPLENBQUMsSUFBSSxlQUFJLEVBQUUsQ0FBQztLQUNuQixPQUFPLENBQUMsSUFBSSxXQUFJLEVBQUUsQ0FBQztLQUNuQixPQUFPLENBQ04sdUNBQXVDLEVBQ3ZDLGlCQUFpQixFQUNqQixLQUFLLENBQUMsRUFBRTtJQUNOLEtBQUs7U0FDRixVQUFVLENBQUMsZUFBZSxFQUFFO1FBQzNCLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLE9BQU8sRUFBRSxNQUFNO0tBQ2hCLENBQUM7U0FDRCxVQUFVLENBQUMsY0FBYyxFQUFFO1FBQzFCLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLE9BQU8sRUFBRSxpQkFBaUI7S0FDM0IsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxFQUNELElBQUksQ0FBQyxFQUFFO0lBQ0wsK0JBQWMsQ0FBQztRQUNiLElBQUksQ0FBQyxhQUF1QjtRQUM1QixLQUFLO1FBQ0wsUUFBUTtRQUNSLElBQUksQ0FBQyxZQUFzQjtLQUM1QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQ0Y7S0FDQSxPQUFPLENBQ04sZ0NBQWdDLEVBQ2hDLGdCQUFnQixFQUNoQixLQUFLLENBQUMsRUFBRTtJQUNOLEtBQUs7U0FDRixVQUFVLENBQUMsVUFBVSxFQUFFO1FBQ3RCLFFBQVEsRUFBRSxZQUFZO0tBQ3ZCLENBQUM7U0FDRCxVQUFVLENBQUMsS0FBSyxFQUFFO1FBQ2pCLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUM7U0FDRCxVQUFVLENBQUMsT0FBTyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxPQUFPO0tBQ2xCLENBQUMsQ0FBQztBQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsRUFBRTtJQUNMLDJCQUFZLENBQ1YsSUFBSSxDQUFDLEdBQWEsRUFDbEIsSUFBSSxDQUFDLEdBQWEsRUFDbEIsSUFBSSxDQUFDLEtBQWUsRUFDcEIsOEJBQWtCLENBQUMsSUFBSSxDQUFDLENBQ3pCLENBQUM7QUFDSixDQUFDLENBQ0Y7S0FDQSxPQUFPLENBQUMsSUFBSSxnQkFBSyxFQUFFLENBQUM7S0FDcEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDIn0=