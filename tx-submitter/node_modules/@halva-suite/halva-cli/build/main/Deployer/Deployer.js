"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployContract = exports.callContractRPC = exports.callContract = exports.instantiate = exports.UploadContract = void 0;
// tslint:disable: no-implicit-dependencies
// tslint:disable: no-submodule-imports
const api_1 = require("@polkadot/api");
const testing_1 = __importDefault(require("@polkadot/keyring/testing"));
const fs_1 = require("fs");
const consts_1 = require("./consts");
const utils_1 = require("./utils");
async function UploadContract(filePath, polkadot, account) {
    const tx = polkadot.tx.contracts.putCode(`0x${utils_1.GetByteArray(filePath)}`);
    const result = await utils_1.sendAndReturnFinalized(account, tx);
    const record = result.findRecord('contracts', 'CodeStored');
    if (!record) {
        console.error('\x1b[31m%s\x1b[0m', 'ERROR: No code stored after executing putCode()');
        console.warn('\x1b[31m%s\x1b[0m', 'Check block for more info: \n Block hash: ' + result.status.asFinalized);
        process.exit(126);
    }
    return record.event.data[0].toString();
}
exports.UploadContract = UploadContract;
exports.instantiate = async (api, signer, codeHash, inputData, endowment, gasRequired = consts_1.GAS_REQUIRED) => {
    const tx = api.tx.contracts.instantiate(endowment, gasRequired, codeHash, inputData);
    const result = await utils_1.sendAndReturnFinalized(signer, tx);
    const record = result.findRecord('contracts', 'Instantiated');
    if (!record) {
        console.error('\x1b[31m%s\x1b[0m', 'ERROR: No new instantiated contract');
        console.warn('\x1b[31m%s\x1b[0m', 'Check block for more info: \n Block hash: ' + result.status.asFinalized);
        process.exit(126);
    }
    // Return the Address of  the instantiated contract.
    return record.event.data[1];
};
exports.callContract = async (api, signer, contractAddress, inputData, gasRequired = consts_1.GAS_REQUIRED, endowment = 0) => {
    const tx = api.tx.contracts.call(contractAddress, endowment, gasRequired, inputData);
    const result = await utils_1.sendAndReturnFinalized(signer, tx);
    return result;
};
async function callContractRPC(api, signer, contractAddress, inputData, gasRequired = consts_1.GAS_REQUIRED, endowment = 0) {
    signer = signer;
    const rpc = await api.rpc.contracts.call({
        origin: signer.address,
        dest: contractAddress,
        value: endowment,
        gasLimit: gasRequired,
        inputData
    });
    if (rpc.isError) {
        throw new Error('RPC cal is error');
    }
    return rpc.asSuccess;
}
exports.callContractRPC = callContractRPC;
exports.deployContract = async (contract, abi, constructorIndex, args, config) => {
    const provider = new api_1.WsProvider(config.halvaJs.ws);
    const polkadot = await api_1.ApiPromise.create({ provider, types: config.types });
    const keyring = testing_1.default({ type: 'sr25519' });
    const alicePair = keyring.getPair(consts_1.ALICE);
    const hash = await UploadContract(contract, polkadot, alicePair);
    console.log('\x1b[33m%s\x1b[0m', 'WASM code hash ' + hash);
    const address = await exports.instantiate(polkadot, alicePair, hash, utils_1.GetAbiData(abi, constructorIndex, args), consts_1.CREATION_FEE);
    console.log('\x1b[33m%s\x1b[0m', `Contract address: ${address}`);
    return {
        address,
        abiJSON: fs_1.readFileSync(abi, 'utf-8'),
        abi: utils_1.getAbiObj(require(abi)),
        path: { contractPath: contract, AbiPath: abi }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVwbG95ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvRGVwbG95ZXIvRGVwbG95ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDO0FBQzNDLHVDQUF1QztBQUN2Qyx1Q0FBMEU7QUFDMUUsd0VBQW9EO0FBS3BELDJCQUFrQztBQUVsQyxxQ0FBNkQ7QUFFN0QsbUNBS2lCO0FBRVYsS0FBSyxVQUFVLGNBQWMsQ0FDbEMsUUFBZ0IsRUFDaEIsUUFBb0IsRUFDcEIsT0FBb0I7SUFFcEIsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssb0JBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEUsTUFBTSxNQUFNLEdBQUcsTUFBTSw4QkFBc0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFNUQsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE9BQU8sQ0FBQyxLQUFLLENBQ1gsbUJBQW1CLEVBQ25CLGlEQUFpRCxDQUNsRCxDQUFDO1FBQ0YsT0FBTyxDQUFDLElBQUksQ0FDVixtQkFBbUIsRUFDbkIsNENBQTRDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQ3pFLENBQUM7UUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN6QyxDQUFDO0FBdEJELHdDQXNCQztBQUVZLFFBQUEsV0FBVyxHQUFHLEtBQUssRUFDOUIsR0FBZSxFQUNmLE1BQW1CLEVBQ25CLFFBQWdCLEVBQ2hCLFNBQWMsRUFDZCxTQUFhLEVBQ2IsY0FB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