"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAbiObj = exports.GetAbiData = exports.sendAndReturnSignFinalized = exports.sendAndReturnFinalized = exports.GetByteArray = void 0;
const api_contract_1 = require("@polkadot/api-contract");
const types_1 = require("@polkadot/types");
const fs_1 = require("fs");
exports.GetByteArray = (filePath) => {
    if (!fs_1.existsSync(filePath)) {
        throw new Error(`File ${filePath} not exist`);
    }
    const fileData = fs_1.readFileSync(filePath).toString('hex');
    return fileData;
};
async function sendAndReturnFinalized(signer, tx) {
    return new Promise((resolve, reject) => {
        tx.signAndSend(signer, (result) => {
            if (result.status.isInBlock) {
                if (globalThis.verbose)
                    console.log(`Write in block: ${result.status.asInBlock}`);
                // Return the result of the submittable extrinsic after the transfer is finalized
            }
            if (result.status.isFinalized) {
                if (globalThis.verbose)
                    console.log(`Finalized in: ${result.status.asFinalized}`);
                resolve(result);
            }
            if (result.status.isDropped ||
                result.status.isInvalid ||
                result.status.isUsurped) {
                reject(result);
                if (globalThis.verbose)
                    console.error('ERROR: Transaction could not be finalized.');
            }
        });
    });
}
exports.sendAndReturnFinalized = sendAndReturnFinalized;
async function sendAndReturnSignFinalized(tx) {
    return new Promise((resolve, reject) => {
        tx.send((result) => {
            if (result.status.isInBlock) {
                if (globalThis.verbose)
                    console.log(`Write in block: ${result.status.asInBlock}`);
                // Return the result of the submittable extrinsic after the transfer is finalized
            }
            if (result.status.isFinalized) {
                if (globalThis.verbose)
                    console.log(`Finalized in: ${result.status.asFinalized}`);
                resolve(result);
            }
            if (result.status.isDropped ||
                result.status.isInvalid ||
                result.status.isUsurped) {
                reject(result);
                console.error('ERROR: Transaction could not be finalized.');
            }
        });
    });
}
exports.sendAndReturnSignFinalized = sendAndReturnSignFinalized;
exports.GetAbiData = (path, constructorIndex, arg) => {
    const metadata = require(path);
    const selector = exports.getAbiObj(metadata);
    const data = selector.constructors[constructorIndex](arg);
    return data;
};
exports.getAbiObj = obj => {
    const registry = new types_1.TypeRegistry();
    const contractAbi = new api_contract_1.Abi(registry, obj);
    return contractAbi;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvRGVwbG95ZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EseURBQTZDO0FBRTdDLDJDQUErQztBQUMvQywyQkFBOEM7QUFFakMsUUFBQSxZQUFZLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7SUFDL0MsSUFBSSxDQUFDLGVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsUUFBUSxZQUFZLENBQUMsQ0FBQztLQUMvQztJQUNELE1BQU0sUUFBUSxHQUFHLGlCQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVLLEtBQUssVUFBVSxzQkFBc0IsQ0FDMUMsTUFBbUIsRUFDbkIsRUFBTztJQUVQLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUF5QixFQUFFLEVBQUU7WUFDbkQsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDM0IsSUFBSSxVQUFVLENBQUMsT0FBTztvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUM1RCxpRkFBaUY7YUFDbEY7WUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUM3QixJQUFJLFVBQVUsQ0FBQyxPQUFPO29CQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7Z0JBQzVELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNqQjtZQUNELElBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTO2dCQUN2QixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVM7Z0JBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUN2QjtnQkFDQSxNQUFNLENBQUMsTUFBMkIsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLFVBQVUsQ0FBQyxPQUFPO29CQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7YUFDL0Q7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTNCRCx3REEyQkM7QUFFTSxLQUFLLFVBQVUsMEJBQTBCLENBQzlDLEVBQU87SUFFUCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUF5QixFQUFFLEVBQUU7WUFDcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDM0IsSUFBSSxVQUFVLENBQUMsT0FBTztvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUM1RCxpRkFBaUY7YUFDbEY7WUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUM3QixJQUFJLFVBQVUsQ0FBQyxPQUFPO29CQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7Z0JBQzVELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNqQjtZQUNELElBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTO2dCQUN2QixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVM7Z0JBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUN2QjtnQkFDQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO2FBQzdEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUF6QkQsZ0VBeUJDO0FBRVksUUFBQSxVQUFVLEdBQUcsQ0FDeEIsSUFBWSxFQUNaLGdCQUF3QixFQUN4QixHQUFRLEVBQ1IsRUFBRTtJQUNGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixNQUFNLFFBQVEsR0FBRyxpQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVXLFFBQUEsU0FBUyxHQUFHLEdBQUcsQ0FBQyxFQUFFO0lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQVksRUFBRSxDQUFDO0lBQ3BDLE1BQU0sV0FBVyxHQUFHLElBQUksa0JBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDM0MsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQyxDQUFDIn0=