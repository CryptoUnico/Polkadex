import { ApiPromise, SubmittableResult } from '@polkadot/api';
import { KeyringPair } from '@polkadot/keyring/types';
import { Address } from '@polkadot/types/interfaces';
import { ContractExecResultSuccess } from '@polkadot/types/interfaces/contracts';
import BN from 'bn.js';
import { HalvaTestConfig } from '../TestRunner';
import { Contract } from './Contract';
export declare function UploadContract(filePath: string, polkadot: ApiPromise, account: KeyringPair): Promise<string>;
export declare const instantiate: (api: ApiPromise, signer: KeyringPair, codeHash: string, inputData: any, endowment: BN, gasRequired?: number) => Promise<Address>;
export declare const callContract: (api: ApiPromise, signer: KeyringPair, contractAddress: any, inputData: any, gasRequired?: number, endowment?: number) => Promise<SubmittableResult>;
export declare function callContractRPC(api: ApiPromise, signer: KeyringPair, contractAddress: Address, inputData: any, gasRequired?: number, endowment?: number): Promise<ContractExecResultSuccess>;
export declare const deployContract: (contract: string, abi: string, constructorIndex: number, args: any, config: HalvaTestConfig) => Promise<Contract>;
