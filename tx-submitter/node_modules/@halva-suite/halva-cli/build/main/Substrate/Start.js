"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Start = void 0;
const path_1 = require("path");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const halva_spec_builder_1 = require("@halva-suite/halva-spec-builder");
const KeyloggerMiddleware_1 = require("@halva-suite/halva-spec-builder/dist/middlewares/KeyloggerMiddleware");
const SPEC_FILE_NAME = 'halvaSpec.json';
const SUBSTRATE_TAG = 'v2.0.0';
exports.Start = async (pathSubstrate, config) => {
    if (await getCurrentBranch() !== SUBSTRATE_TAG) {
        await spawnProcess('git', ['checkout', SUBSTRATE_TAG]);
    }
    await spawnProcess('./scripts/init.sh');
    await spawnProcess('cargo', ['build']);
    try {
        await checkFile(pathSubstrate);
    }
    catch (err) {
        console.error(err.message);
        return;
    }
    await buildSpec(pathSubstrate);
    (await halva_spec_builder_1.HalvaSpecModifier.init(path_1.join(process.cwd(), SPEC_FILE_NAME), '1152921504606847000', 10)
        .setMnemonic(config.mnemonic)
        .apply(halva_spec_builder_1.balanceMiddleware)
        .apply(KeyloggerMiddleware_1.keyloggerMiddleware)
        .run()).output(path_1.join(process.cwd(), SPEC_FILE_NAME));
    await spawnProcess(path_1.resolve(pathSubstrate), [
        `--chain=./${SPEC_FILE_NAME}`,
        '--validator',
        '--alice',
        '--tmp',
    ], false);
};
async function checkFile(path) {
    return new Promise((resolve, reject) => {
        fs_1.stat(path, (err, stats) => {
            if (err) {
                return reject(err);
            }
            return resolve(stats);
        });
    });
}
async function getCurrentBranch() {
    return new Promise((resolve, reject) => {
        child_process_1.exec('git rev-parse --abbrev-ref HEAD', (err, stdout) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(stdout.trim());
        });
    });
}
async function removeSpec(specPath) {
    return new Promise((resolve, reject) => {
        fs_1.unlink(specPath, async (err) => {
            if (err) {
                return reject(err);
            }
            resolve();
        });
    });
}
async function buildSpec(pathSubstrate) {
    const specPath = path_1.join(process.cwd(), SPEC_FILE_NAME);
    try {
        await checkFile(specPath);
        await removeSpec(specPath);
    }
    catch (e) { }
    let spec = fs_1.createWriteStream(specPath);
    await spawnProcess(pathSubstrate, ['build-spec', '--dev'], true, (chunk) => spec.write(chunk.toString()), undefined, undefined, spec.close);
}
function spawnProcess(command, args, silent = false, onStdoudData, onStderrData, onErr, onClose) {
    return new Promise((resolve, reject) => {
        const proc = child_process_1.spawn(command, args);
        proc.stdout.on('data', function (chunk) {
            if (!silent)
                console.log(chunk.toString());
            if (onStdoudData)
                onStdoudData(chunk);
        });
        proc.stderr.on('data', function (chunk) {
            if (!silent)
                console.log(chunk.toString());
            if (onStderrData)
                onStderrData(chunk);
        });
        proc.on('error', err => {
            if (onErr)
                onErr(err);
            reject(err);
        });
        proc.on('close', () => {
            if (onErr)
                onClose();
            resolve();
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvU3Vic3RyYXRlL1N0YXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtCQUFxQztBQUNyQyxpREFBNEM7QUFDNUMsMkJBQXFEO0FBQ3JELHdFQUF1RjtBQUN2Riw4R0FBMkc7QUFJM0csTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDeEMsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDO0FBRWxCLFFBQUEsS0FBSyxHQUFHLEtBQUssRUFDeEIsYUFBcUIsRUFDckIsTUFBdUIsRUFDdkIsRUFBRTtJQUNGLElBQUksTUFBTSxnQkFBZ0IsRUFBRSxLQUFLLGFBQWEsRUFBRTtRQUM5QyxNQUFNLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztLQUN4RDtJQUVELE1BQU0sWUFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDeEMsTUFBTSxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUV2QyxJQUFJO1FBQ0YsTUFBTSxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDaEM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDUjtJQUVELE1BQU0sU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRS9CLENBQ0UsTUFBTSxzQ0FBaUIsQ0FBQyxJQUFJLENBQzFCLFdBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxDQUFDLEVBQ25DLHFCQUFxQixFQUNyQixFQUFFLENBQ0g7U0FDRSxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUM1QixLQUFLLENBQUMsc0NBQWlCLENBQUM7U0FDeEIsS0FBSyxDQUFDLHlDQUFtQixDQUFDO1NBQzFCLEdB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