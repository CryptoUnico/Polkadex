"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fails = exports.passes = exports.eventNotEmitted = exports.eventEmitted = void 0;
const chai_1 = require("chai");
const utils_1 = require("../Deployer/utils");
exports.eventEmitted = async (asyncFn, eventName, section, message, signer) => {
    let txResult;
    if (SubmittableResultOf(asyncFn)) {
        txResult = asyncFn;
    }
    else if (SubmittableExtrinsicOf(asyncFn)) {
        txResult = await getTxResult(asyncFn, signer);
    }
    else {
        throw new chai_1.AssertionError('Bad type');
    }
    const record = txResult.findRecord(section, eventName);
    if (record.event.data[0] == null) {
        const assertionMessage = createAssertionMessage(message, `Failed with event was not emitted although it should`);
        throw new chai_1.AssertionError(assertionMessage);
    }
};
exports.eventNotEmitted = async (asyncFn, eventName, section, message, signer) => {
    var _a;
    let txResult;
    if (SubmittableResultOf(asyncFn)) {
        txResult = asyncFn;
    }
    else if (SubmittableExtrinsicOf(asyncFn)) {
        txResult = await getTxResult(asyncFn, signer);
    }
    else {
        throw new chai_1.AssertionError('Bad type');
    }
    const record = txResult.findRecord(section, eventName);
    if (((_a = record === null || record === void 0 ? void 0 : record.event) === null || _a === void 0 ? void 0 : _a.data[0]) != null) {
        const assertionMessage = createAssertionMessage(message, `Failed with the event was emitted although it shouldn't`);
        throw new chai_1.AssertionError(assertionMessage);
    }
};
exports.passes = async (asyncFn, message, signer) => {
    var _a;
    let txResult;
    if (SubmittableResultOf(asyncFn)) {
        txResult = asyncFn;
    }
    else if (SubmittableExtrinsicOf(asyncFn)) {
        txResult = await getTxResult(asyncFn, signer);
    }
    else {
        throw new chai_1.AssertionError('Bad type');
    }
    const result = txResult.findRecord('system', 'ExtrinsicFailed');
    if ((_a = result === null || result === void 0 ? void 0 : result.event) === null || _a === void 0 ? void 0 : _a.data[0]) {
        const assertionMessage = createAssertionMessage(message, `Failed with ${result.event.data[0]}`);
        throw new chai_1.AssertionError(assertionMessage);
    }
};
exports.fails = async (asyncFn, errorName, module, signer, message) => {
    var _a;
    let txResult;
    if (SubmittableResultOf(asyncFn)) {
        txResult = asyncFn;
    }
    else if (SubmittableExtrinsicOf(asyncFn)) {
        txResult = await getTxResult(asyncFn, signer);
    }
    else {
        throw new chai_1.AssertionError('Bad type');
    }
    const err = txResult.findRecord('system', 'ExtrinsicFailed');
    if (!((_a = err === null || err === void 0 ? void 0 : err.event) === null || _a === void 0 ? void 0 : _a.data[0])) {
        const assertionMessage = createAssertionMessage(message, `Did not fail`);
        throw new chai_1.AssertionError(assertionMessage);
    }
    const errInfo = JSON.parse(err.event.data[0].toString()).Module;
    const txErrorName = globalThis.chainMetadata.asV12.modules[errInfo.index].errors[errInfo.error]
        .name;
    const txModuleName = globalThis.chainMetadata.asV12.modules[errInfo.index].name;
    if (errorName != txErrorName.toString() ||
        module != txModuleName.toString()) {
        const assertionMessage = createAssertionMessage(message, `Expected to fail with ${module}, but failed with: ${errorName}`);
        throw new chai_1.AssertionError(assertionMessage);
    }
};
const getTxResult = async (asyncFn, signer) => {
    let txResult;
    if (signer) {
        txResult = await utils_1.sendAndReturnFinalized(signer, asyncFn);
    }
    else {
        txResult = await utils_1.sendAndReturnSignFinalized(asyncFn);
    }
    return txResult;
};
const createAssertionMessage = (passedMessage, defaultMessage) => {
    let assertionMessage = defaultMessage;
    if (passedMessage) {
        assertionMessage = `${passedMessage} : ${defaultMessage}`;
    }
    return assertionMessage;
};
const SubmittableExtrinsicOf = (val) => {
    return val.signAndSend != undefined;
};
const SubmittableResultOf = (val) => {
    return val.findRecord != undefined;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Bc3NlcnQvQXNzZXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwrQkFBc0M7QUFDdEMsNkNBRzJCO0FBQ2QsUUFBQSxZQUFZLEdBQUcsS0FBSyxFQUMvQixPQUFZLEVBQ1osU0FBaUIsRUFDakIsT0FBZSxFQUNmLE9BQWUsRUFDZixNQUFtQixFQUNuQixFQUFFO0lBQ0YsSUFBSSxRQUEyQixDQUFDO0lBQ2hDLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDaEMsUUFBUSxHQUFHLE9BQU8sQ0FBQztLQUNwQjtTQUFNLElBQUksc0JBQXNCLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDMUMsUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMvQztTQUFNO1FBQ0wsTUFBTSxJQUFJLHFCQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdEM7SUFDRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNoQyxNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUM3QyxPQUFPLEVBQ1Asc0RBQXNELENBQ3ZELENBQUM7UUFDRixNQUFNLElBQUkscUJBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzVDO0FBQ0gsQ0FBQyxDQUFDO0FBRVcsUUFBQSxlQUFlLEdBQUcsS0FBSyxFQUNsQyxPQUFZLEVBQ1osU0FBaUIsRUFDakIsT0FBZSxFQUNmLE9BQWUsRUFDZixNQUFtQixFQUNuQixFQUFFOztJQUNGLElBQUksUUFBMkIsQ0FBQztJQUNoQyxJQUFJLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2hDLFFBQVEsR0FB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