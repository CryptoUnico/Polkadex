"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.GetNetworks = void 0;
const fs_1 = require("fs");
exports.GetNetworks = (config) => {
    let networks = [];
    for (const [key, value] of Object.entries(config.networkList.networks)) {
        let x = value;
        x = x;
        networks.push(key);
    }
    let deployData;
    if (fs_1.existsSync(process.cwd() + '/deployData.json')) {
        deployData = JSON.parse(fs_1.readFileSync(process.cwd() + '/deployData.json').toString());
    }
    if (!deployData) {
        deployData = [];
        let nets_noDeploy;
        nets_noDeploy = [];
        networks.forEach(n => {
            nets_noDeploy.push({
                name: n,
                address: config.halvaJs.networks[n].ws,
                contracts: null
            });
        });
        return nets_noDeploy;
    }
    for (let i = 0; i < deployData.networks.length; i++) {
        if (!networks.includes(deployData.networks[i].networkName)) {
            networks.push(deployData.networks[i].networkName);
        }
    }
    if (networks.length == 0) {
        console.warn('Networks not found');
    }
    let networkList;
    networkList = [];
    networks.forEach(net => {
        let currentNetwork = deployData.networks.find(x => x.networkName == net);
        let currentContracts;
        currentContracts = [];
        currentNetwork.contracts.forEach(c => {
            currentContracts.push({
                name: c.path.contractPath,
                address: c.address.toString(),
                deployed: true
            });
        });
        networkList.push({
            name: net,
            address: currentNetwork.networkAddress,
            contracts: currentContracts
        });
    });
    return networkList;
};
exports.run = (config) => {
    const networkList = exports.GetNetworks(config);
    networkList.forEach(n => {
        console.log(`\nNetwork: ${n.name} : WS: ${n.address}`);
        if (n.contracts) {
            n.contracts.forEach(c => {
                console.log(`\nContract name: ${c.name} : Address: ${c.address} : Deployed ${c.deployed}`);
            });
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0TmV0d29ya0xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvTmV0d29ya3MvR2V0TmV0d29ya0xpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkJBQThDO0FBR2pDLFFBQUEsV0FBVyxHQUFHLENBQUMsTUFBdUIsRUFBZ0IsRUFBRTtJQUNuRSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN0RSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDZCxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ04sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNwQjtJQUNELElBQUksVUFBZSxDQUFDO0lBQ3BCLElBQUksZUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFO1FBQ2xELFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUNyQixpQkFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUM5QyxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxhQUEyQixDQUFDO1FBQ2hDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDbkIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuQixhQUFhLENBQUMsSUFBSSxDQUFDO2dCQUNqQixJQUFJLEVBQUUsQ0FBQztnQkFDUCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBWTtnQkFDaEQsU0FBUyxFQUFFLElBQUk7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