"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.substrateValidatorMiddleware = void 0;
exports.substrateValidatorMiddleware = (context) => {
    var _a, _b, _c, _d, _e, _f;
    if (!((_c = (_b = (_a = context.jsonSchema.genesis) === null || _a === void 0 ? void 0 : _a.runtime) === null || _b === void 0 ? void 0 : _b.palletStaking) === null || _c === void 0 ? void 0 : _c.stakers))
        throw new Error('Invalid JSON');
    if (!((_f = (_e = (_d = context.jsonSchema.genesis) === null || _d === void 0 ? void 0 : _d.runtime) === null || _e === void 0 ? void 0 : _e.palletSession) === null || _f === void 0 ? void 0 : _f.keys))
        throw new Error('Invalid JSON');
    context.jsonSchema.genesis.runtime.palletStaking.stakers = [
        [
            context.sr25519Keys.getPairs()[0].address,
            context.sr25519Keys.getPairs()[1].address,
            10000000000000000,
            'Validator'
        ]
    ];
    context.jsonSchema.genesis.runtime.palletStaking.invulnerables = [
        context.sr25519Keys.getPairs()[0].address
    ];
    context.jsonSchema.genesis.runtime.palletStaking.minimumValidatorCount = 1;
    context.jsonSchema.genesis.runtime.palletStaking.validatorCount = 4;
    context.jsonSchema.genesis.runtime.palletSession.keys = [
        [
            context.sr25519Keys.getPairs()[0].address,
            context.sr25519Keys.getPairs()[0].address,
            {
                grandpa: context.ed25519Keys.getPairs()[0].address,
                babe: context.sr25519Keys.getPairs()[0].address,
                im_online: context.sr25519Keys.getPairs()[0].address,
                authority_discovery: context.sr25519Keys.getPairs()[0].address
            }
        ]
    ];
    const pairsGrandpa = context.ed25519Keys.getPairs();
    context.jsonSchema.genesis.runtime.palletGrandpa.authorities.push([
        pairsGrandpa[0].address,
        1
    ]);
    return context.jsonSchema;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic3RyYXRlVmFsaWRhdG9yTWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9DdXN0b21NaWRsbGV3YXJlcy9TdWJzdHJhdGVWYWxpZGF0b3JNaWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVhLFFBQUEsNEJBQTRCLEdBQUcsQ0FDMUMsT0FBK0IsRUFDMUIsRUFBRTs7SUFDUCxJQUFJLG9CQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTywwQ0FBRSxPQUFPLDBDQUFFLGFBQWEsMENBQUUsT0FBTyxDQUFBO1FBQzlELE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEMsSUFBSSxvQkFBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sMENBQUUsT0FBTywwQ0FBRSxhQUFhLDBDQUFFLElBQUksQ0FBQTtRQUMzRCxNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHO1FBQ3pEO1lBQ0UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBQ3pDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztZQUN6QyxpQkFBaUI7WUFDakIsV0FBVztTQUNaO0tBQ0YsQ0FBQztJQUNGLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHO1FBQy9ELE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztLQUMxQyxDQUFDO0lBQ0YsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ3BFLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHO1FBQ3REO1lBQ0UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBQ3pDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztZQUN6QztnQkFDRSxPQUFPLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO2dCQUNsRCxJQUFJLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO2dCQUMvQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO2dCQUNwRCxtQkFBbUIsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87YUFDL0Q7U0FDRjtLQUNGLENBQUM7SUFDRixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUNoRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztRQUN2QixDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzVCLENBQUMsQ0FBQyJ9