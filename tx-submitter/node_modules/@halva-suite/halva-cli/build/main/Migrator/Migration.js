"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunMigration = exports.Migration = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const Deployer_1 = require("../Deployer/Deployer");
const DeployData_1 = require("./DeployData");
class Migration {
    constructor(config) {
        this.config = config;
    }
    async deploy(contract, args, constructorIndex = 0) {
        const data = await Deployer_1.deployContract(path_1.resolve(contract.contractPath), path_1.resolve(contract.AbiPath), constructorIndex, args, this.config);
        const network = this.parent.data.networks.find(f => f.networkName == this.config.networkName);
        if (network) {
            network.contracts.push(data);
        }
        else {
            this.parent.data.networks.push({
                networkName: this.config.networkName,
                networkAddress: this.config.halvaJs.ws,
                contracts: [data]
            });
        }
        return data;
    }
}
exports.Migration = Migration;
exports.RunMigration = async (migrationsPath, config) => {
    const migrations = fs_1.readdirSync(path_1.resolve(migrationsPath));
    const deployer = new Migration(config);
    deployer.data = new DeployData_1.DeployData();
    deployer.data.networks = [];
    deployer.parent = deployer;
    // tslint:disable-next-line: prefer-for-of
    for (let i = 0; i < migrations.length; i++) {
        const migration = require(path_1.join(path_1.resolve(migrationsPath), migrations[i]));
        await migration(deployer);
    }
    fs_1.writeFileSync(process.cwd() + '/deployData.json', JSON.stringify(deployer.data));
    process.exit(0);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlncmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL01pZ3JhdG9yL01pZ3JhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBZ0Q7QUFDaEQsK0JBQXFDO0FBRXJDLG1EQUFzRDtBQUV0RCw2Q0FBMEM7QUFDMUMsTUFBYSxTQUFTO0lBS3BCLFlBQVksTUFBdUI7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQ2pCLFFBQTJCLEVBQzNCLElBQVUsRUFDVixnQkFBZ0IsR0FBRyxDQUFDO1FBRXBCLE1BQU0sSUFBSSxHQUFHLE1BQU0seUJBQWMsQ0FDL0IsY0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFDOUIsY0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFDekIsZ0JBQWdCLEVBQ2hCLElBQUksRUFDSixJQUFJLENBQUMsTUFBTSxDQUNaLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUM1QyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQzlDLENBQUM7UUFDRixJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUM3QixXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXO2dCQUNwQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBWTtnQkFDaEQsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQ2xCLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFsQ0QsOEJBa0NDO0FBRVksUUFBQSxZQUFZLEdBQUcsS0FBSyxFQUMvQixjQUFzQixFQUN0QixNQUF1QixFQUN2QixFQUFFO0lBQ0YsTUFBTSxVQUFVLEdBQUcsZ0JBQVcsQ0FBQyxjQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUN4RCxNQUFNLFFBQVEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBQ2pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUM1QixRQUFRLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUMzQiwwQ0FBMEM7SUFDMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQUksQ0FBQyxjQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMzQjtJQUNELGtCQUFhLENBQ1gsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLGtCQUFrQixFQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FDOUIsQ0FBQztJQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FBQyxDQUFDIn0=