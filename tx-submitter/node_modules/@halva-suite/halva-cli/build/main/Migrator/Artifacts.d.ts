import { SubmittableResult } from '@polkadot/api';
import { KeyringPair } from '@polkadot/keyring/types';
import { ContractExecResultSuccess } from '@polkadot/types/interfaces/contracts/types';
import { Contract } from '../Deployer/Contract';
export declare class artifacts {
    static require(contract: string): any;
    static ReturnTxResult(abiMethod: string, signer: KeyringPair, contract: Contract, args: any): Promise<SubmittableResult>;
    static ReturnRPCResult(abiMethod: string, signer: KeyringPair, contract: Contract, args: any): Promise<ContractExecResultSuccess>;
    private static CreateContractObject;
}
export declare class ContractPrimitive {
    private deployed;
    private contract;
    constructor(deployed: boolean, contract: string);
    new(): string;
    Deployed(): boolean;
}
export interface CallContractResult {
    txResult: SubmittableResult;
    rpcResult: ContractExecResultSuccess;
}
