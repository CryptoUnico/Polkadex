"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HalvaTestConfig = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const FindConfigFile_1 = require("../../Configure/FindConfigFile");
class HalvaTestConfig {
    constructor(filesPath, mocha, network, networkName, bail = false, timeout = 0, colors = false, verbose = false, isTest = false) {
        var _a;
        this.testingFiles = [];
        if (isTest) {
            if (filesPath && filesPath.length > 0) {
                if (fs_1.lstatSync(filesPath[0]).isDirectory()) {
                    filesPath.forEach(path => {
                        this.testingFiles.push(...fs_1.readdirSync(path_1.resolve(path)).map(f => path_1.join(path, f)));
                    });
                }
                else if (fs_1.lstatSync(filesPath[0]).isFile()) {
                    this.testingFiles = filesPath.map(f => path_1.resolve(f));
                }
            }
            else {
                if (isTest)
                    throw new Error('No files for test');
            }
        }
        this.mocha = mocha || {};
        this.bail = bail;
        this.verbose = verbose;
        this.timeout = timeout;
        this.networkList = require(network == null
            ? FindConfigFile_1.getConfigureModule(null)
            : path_1.resolve(network));
        this.halvaJs = require(network == null
            ? FindConfigFile_1.getConfigureModule(null)
            : path_1.resolve(network));
        this.types =
            ((_a = this.halvaJs.polkadotjs) === null || _a === void 0 ? void 0 : _a.types) == undefined
                ? null
                : this.halvaJs.polkadotjs.types;
        this.halvaJs = this.halvaJs.networks[networkName == null ? Object.keys(this.halvaJs.networks)[0] : networkName];
        this.mnemonic = this.halvaJs.mnemonic;
        this.networkName = networkName;
        this.colors = colors;
    }
}
exports.HalvaTestConfig = HalvaTestConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFsdmFUZXN0Q29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL1Rlc3RSdW5uZXIvQ29uZmlnL0hhbHZhVGVzdENvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBNEM7QUFFNUMsK0JBQXFDO0FBQ3JDLG1FQUFvRTtBQUNwRSxNQUFhLGVBQWU7SUFZMUIsWUFDRSxTQUFtQixFQUNuQixLQUFvQixFQUNwQixPQUFnQixFQUNoQixXQUFvQixFQUNwQixJQUFJLEdBQUcsS0FBSyxFQUNaLE9BQU8sR0FBRyxDQUFDLEVBQ1gsTUFBTSxHQUFHLEtBQUssRUFDZCxPQUFPLEdBQUcsS0FBSyxFQUNmLE1BQU0sR0FBRyxLQUFLOztRQUVkLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksY0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO29CQUN6QyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDcEIsR0FBRyxnQkFBVyxDQUFDLGNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdEQsQ0FBQztvQkFDSixDQUFDLENBQUMsQ0FBQztpQkFDSjtxQkFBTSxJQUFJLGNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDM0MsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3BEO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxNQUFNO29CQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQzthQUNsRDtTQUNGO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJO1lBQ3hDLENBQUMsQ0FBQyxtQ0FBa0IsQ0FBQyxJQUFJLENBQUM7WUFDMUIsQ0FBQyxDQUFDLGNBQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJO1lBQ3BDLENBQUMsQ0FBQyxtQ0FBa0IsQ0FBQyxJQUFJLENBQUM7WUFDMUIsQ0FBQyxDQUFDLGNBQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLO1lBQ1IsT0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsMENBQUUsS0FBSyxLQUFJLFNBQVM7Z0JBQ3pDLENBQUMsQ0FBQyxJQUFJO2dCQUNOLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDbEMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQzFFLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQTVERCwwQ0E0REMifQ==