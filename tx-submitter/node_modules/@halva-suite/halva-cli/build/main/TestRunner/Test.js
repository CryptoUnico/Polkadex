"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateMocha = exports.SetTestGlobal = exports.HalvaRunTests = void 0;
const api_1 = require("@polkadot/api");
const chai_1 = require("chai");
const mocha_1 = __importDefault(require("mocha"));
const path_1 = __importDefault(require("path"));
const Accounts_1 = require("../Accounts");
const Asserts_1 = require("../Assert/Asserts");
const Artifacts_1 = require("../Migrator/Artifacts");
const testing_1 = __importDefault(require("@polkadot/keyring/testing"));
const consts_1 = require("../Deployer/consts");
exports.HalvaRunTests = async (config, onlyGlobal = false) => {
    config.testingFiles = config.testingFiles.map(testFile => path_1.default.resolve(testFile));
    const provider = new api_1.WsProvider(config.halvaJs.ws);
    const polkadot = await api_1.ApiPromise.create({ provider, types: config.types });
    const accounts = await Accounts_1.generateAccounts(10, config.halvaJs.mnemonic);
    const keyring = testing_1.default({ type: 'sr25519' });
    const alicePair = keyring.getPair(consts_1.ALICE);
    const charliePair = keyring.getPair(consts_1.CHARLIE);
    const mocha = exports.CreateMocha(config);
    let metadata;
    try {
        // @ts-ignore
        metadata = await polkadot.rpc.state.getMetadata();
    }
    catch (err) {
        console.log('Metadata is undefined');
        process.exit(0);
    }
    const bobPair = keyring.getPair(consts_1.BOB);
    exports.SetTestGlobal(accounts, polkadot, config, alicePair, bobPair, charliePair, mocha, metadata);
    if (onlyGlobal)
        return;
    config.testingFiles = config.testingFiles.map(testFile => {
        return path_1.default.resolve(testFile);
    });
    config.testingFiles.forEach(file => {
        mocha.addFile(file);
    });
    console.log('Run tests: ' + config.testingFiles);
    mocha.run(function (failures) {
        process.exit(failures ? 1 : 0);
    });
};
exports.SetTestGlobal = (accounts, polkadot, config, alicePair, bobPair, charliePair, mochaConfigure, metadata) => {
    global.halva = { polkadot, accounts };
    global.expect = chai_1.expect;
    global.artifacts = Artifacts_1.artifacts;
    global.alicePair = alicePair;
    global.bobPair = bobPair;
    global.charliePair = charliePair;
    global.assert = chai_1.assert;
    global.eventEmitted = Asserts_1.eventEmitted;
    global.eventNotEmitted = Asserts_1.eventNotEmitted;
    global.networkName = config.networkName;
    global.mochaConfigure = mochaConfigure;
    global.passes = Asserts_1.passes;
    global.verbose = config.verbose;
    global.chainMetadata = metadata;
    global.fails = Asserts_1.fails;
};
exports.CreateMocha = (config) => {
    const mochaConfig = config.mocha || {};
    // Propagate --bail option to mocha
    mochaConfig.bail = config.bail;
    // If the command line overrides color usage, use that.
    if (config.colors != null) {
        mochaConfig.useColors = config.colors;
    }
    // Default to true if configuration isn't set anywhere.
    if (mochaConfig.useColors == null) {
        mochaConfig.useColors = true;
    }
    mochaConfig.timeout = config.timeout;
    const mocha = new mocha_1.default(mochaConfig);
    return mocha;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9UZXN0UnVubmVyL1Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVEO0FBR3ZELCtCQUFzQztBQUN0QyxrREFBMEI7QUFDMUIsZ0RBQXdCO0FBQ3hCLDBDQUErQztBQUMvQywrQ0FLMkI7QUFDM0IscURBQWtEO0FBRWxELHdFQUFvRDtBQUNwRCwrQ0FBeUQ7QUFvQjVDLFFBQUEsYUFBYSxHQUFHLEtBQUssRUFDaEMsTUFBdUIsRUFDdkIsVUFBVSxHQUFHLEtBQUssRUFDbEIsRUFBRTtJQUNGLE1BQU0sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFbEYsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkQsTUFBTSxRQUFRLEdBQUcsTUFBTSxnQkFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUUsTUFBTSxRQUFRLEdBQUcsTUFBTSwyQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSxNQUFNLE9BQU8sR0FBRyxpQkFBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDakQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFLLENBQUMsQ0FBQztJQUN6QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFPLENBQUMsQ0FBQztJQUU3QyxNQUFNLEtBQUssR0FBRyxtQkFBVyxDQUFDLE1BQU0sQ0FB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